// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { BrandsApiBrandsGetData, BrandsApiBrandsGetResponses, GetPhoneBrandApiBrandGetData, GetPhoneBrandApiBrandGetResponses, GetPhoneBrandApiBrandGetErrors, ParserApiParserGetData, ParserApiParserGetResponses, ReadRootGetData, ReadRootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Brands
 */
export const brandsApiBrandsGet = <ThrowOnError extends boolean = false>(options?: Options<BrandsApiBrandsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BrandsApiBrandsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/brands',
        ...options
    });
};

/**
 * Get Phone Brand
 */
export const getPhoneBrandApiBrandGet = <ThrowOnError extends boolean = false>(options: Options<GetPhoneBrandApiBrandGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPhoneBrandApiBrandGetResponses, GetPhoneBrandApiBrandGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/{brand}',
        ...options
    });
};

/**
 * Parser
 */
export const parserApiParserGet = <ThrowOnError extends boolean = false>(options?: Options<ParserApiParserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ParserApiParserGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/parser',
        ...options
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};