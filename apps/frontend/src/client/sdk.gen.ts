// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { BrandsApiBrandsGetData, BrandsApiBrandsGetResponses, GetPhoneBrandApiDeviceBrandGetData, GetPhoneBrandApiDeviceBrandGetResponses, GetPhoneBrandApiDeviceBrandGetErrors, ExportCsvApiExportCsvPostData, ExportCsvApiExportCsvPostResponses, TestApiTestGetData, TestApiTestGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Brands
 */
export const brandsApiBrandsGet = <ThrowOnError extends boolean = false>(options?: Options<BrandsApiBrandsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BrandsApiBrandsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/brands',
        ...options
    });
};

/**
 * Get Phone Brand
 */
export const getPhoneBrandApiDeviceBrandGet = <ThrowOnError extends boolean = false>(options: Options<GetPhoneBrandApiDeviceBrandGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPhoneBrandApiDeviceBrandGetResponses, GetPhoneBrandApiDeviceBrandGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/device/{brand}',
        ...options
    });
};

/**
 * Export Csv
 */
export const exportCsvApiExportCsvPost = <ThrowOnError extends boolean = false>(options?: Options<ExportCsvApiExportCsvPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ExportCsvApiExportCsvPostResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/export_csv',
        ...options
    });
};

/**
 * Test
 */
export const testApiTestGet = <ThrowOnError extends boolean = false>(options?: Options<TestApiTestGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestApiTestGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/test',
        ...options
    });
};